# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy Quality API to Cloud Run'

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ARTIFACT_REGISTRY: us-west1-docker.pkg.dev
  GCP_ARTIFACT_REPO: quality-docker-repo ## repo name
  GCP_SERVICE_NAME: quality-api-service
  GCP_REGION: us-west1
  GCP_IMAGE_NAME: quality-api 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Docker Auth
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.auth_token }}
          registry: ${{ env.GCP_ARTIFACT_REGISTRY }}

                # --- ADD THIS NEW DIAGNOSTIC STEP ---
      # - name: 'Debug: Check Authenticated Identity and Permissions'
      #   run: |
      #     echo "--- Checking authenticated identity ---"
      #     gcloud auth list
          
      #     echo "\n--- Checking permissions on the Artifact Registry repository ---"
      #     # This command will try to get the IAM policy for your specific repo.
      #     # If the identity has permissions, it will succeed. If not, it will fail.
      #     gcloud artifacts repositories get-iam-policy \
      #       ${{ env.GCP_ARTIFACT_REPO }} \
      #       --location=${{ env.GCP_REGION }} \
      #       --project=${{ env.GCP_PROJECT_ID }}
      # --- END OF DIAGNOSTIC STEP ---

      - name: Build and Push Container
        run: |
          DOCKER_TAG="${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPO }}/${{ env.GCP_IMAGE_NAME }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"

      - id: deploy
        name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v3
        with:
          service: ${{ env.GCP_SERVICE_NAME }}
          region: ${{ env.GCP_REGION }}
          image: ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPO }}/${{ env.GCP_IMAGE_NAME }}:${{ github.sha }}

      - name: Show output
        run: echo "Deployed at ${{ steps.deploy.outputs.url }}"
      # If required, use the Cloud Run URL output in later steps
    #      echo ${{ steps.deploy.outputs.url }}
